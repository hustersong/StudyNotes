1.如何产生闭包？
*当一个嵌套的内部（子）函数引用了嵌套的外部（父）函数的变量（函数）时，就产生了闭包
*注：父函数需执行，子函数不必执行，父函数执行几次就产生几个闭包
2.闭包到底是什么？
	*使用Chrome调试查看
	*理解一：闭包是嵌套的内部函数（绝大部分人）
	*理解二：包含被引用变量（函数）的对象（极少数人）
	*注意：闭包存在于嵌套的内部函数中
3.产生闭包的条件？
	*嵌套函数
	*内部函数引用了外部函数的数据（变量/函数）
常见的闭包
1.	将函数作为另一个函数的返回值
2.	将函数作为实参传递给另一个函数调用

闭包的作用
1.	使用函数内部的变量在函数执行之后，仍然存活在内存条件中（延长了局部变量的生命周期）
2.	让函数外部可以操作（读写）到函数内部的数据（变量/函数）

问题：
1.	函数执行完成后，函数内部声明变量是否还存在？
一般不存在，闭包时，在子函数内部引用变量未释放前存在
2.	在函数外部能直接访问函数内部的局部变量吗？
不能，可以通过闭包访问

闭包的生命周期
1.	产生：在嵌套内部函数定义执行完成时就产生（不是在调用）
2.	死亡：在嵌套的内部函数成为垃圾对象
function fn1() {
//此时闭包就已经产生（函数提升，内部函数对象已经创建了）
  var a = 2
  var fn2 = function () {
a++
console.log(a)
      }
      return fn2
}
var f = fn1()
f()  //3
f() //4
f = null //闭包死亡（包含闭包的函数对象成为垃圾对象）

闭包的应用
闭包的应用：定义JS模块
	*具有特定功能的js文件
*将所有数据和功能都封装在一个函数内部（私有的）
*只向外部暴露一个包含n个方法的对象或函数
*模块的使用者，只要通过模块暴露的对象调用方法来实现对应的功能
// module.js
  function module() {
var msg = ‘li hao ma ? Lucy.’
function speackU() {
  console.log(‘大声说：’, msg.toUpperCase())
}
function speackL() {
  console.log(‘小声说：’, msg.toLowerCase())
}
return {
speackU:speackU,
speackL:speackL
}
}
// main.html
<script type=”text/javascript” src=”module.js”></script>
var c = module() // 函数执行后方可调用
c.speackU()// 大声说： LI HAO MA ? LUCY.
c.speackL() // 小声说： li hao ma ? lucy.


// module1.js
  (function () {
var msg = ‘li hao ma ? Lucy.’
function speackU() {
  console.log(‘大声说：’, msg.toUpperCase())
}
function speackL() {
  console.log(‘小声说：’, msg.toLowerCase())
}
window.module = {
speackU:speackU,
speackL:speackL
}
})()
// main1.html
<script type=”text/javascript” src=”module1.js”></script>
module..speackU()// 大声说： LI HAO MA ? LUCY.
module..speackL() // 小声说： li hao ma ? lucy.

闭包的缺点及解决
1.	缺点
*函数执行完成后，函数内的局部变量没有释放，占用内存的时间会变长
*容易造成内存泄漏
2.解决
	*能不用闭包就不用
	*及时释放
f = null 
